/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type OutputValidityProofStruct = {
  inputIndexWithinEpoch: BigNumberish;
  outputIndexWithinInput: BigNumberish;
  outputHashesRootHash: BytesLike;
  vouchersEpochRootHash: BytesLike;
  noticesEpochRootHash: BytesLike;
  machineStateHash: BytesLike;
  outputHashInOutputHashesSiblings: BytesLike[];
  outputHashesInEpochSiblings: BytesLike[];
};

export type OutputValidityProofStructOutput = [
  inputIndexWithinEpoch: bigint,
  outputIndexWithinInput: bigint,
  outputHashesRootHash: string,
  vouchersEpochRootHash: string,
  noticesEpochRootHash: string,
  machineStateHash: string,
  outputHashInOutputHashesSiblings: string[],
  outputHashesInEpochSiblings: string[]
] & {
  inputIndexWithinEpoch: bigint;
  outputIndexWithinInput: bigint;
  outputHashesRootHash: string;
  vouchersEpochRootHash: string;
  noticesEpochRootHash: string;
  machineStateHash: string;
  outputHashInOutputHashesSiblings: string[];
  outputHashesInEpochSiblings: string[];
};

export type ProofStruct = {
  validity: OutputValidityProofStruct;
  context: BytesLike;
};

export type ProofStructOutput = [
  validity: OutputValidityProofStructOutput,
  context: string
] & { validity: OutputValidityProofStructOutput; context: string };

export interface CartesiDAppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeVoucher"
      | "getConsensus"
      | "getTemplateHash"
      | "migrateToConsensus"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "supportsInterface"
      | "transferOwnership"
      | "validateNotice"
      | "wasVoucherExecuted"
      | "withdrawEther"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewConsensus"
      | "OwnershipTransferred"
      | "VoucherExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeVoucher",
    values: [AddressLike, BytesLike, ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplateHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToConsensus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateNotice",
    values: [BytesLike, ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "wasVoucherExecuted",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplateHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateNotice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasVoucherExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
}

export namespace NewConsensusEvent {
  export type InputTuple = [newConsensus: AddressLike];
  export type OutputTuple = [newConsensus: string];
  export interface OutputObject {
    newConsensus: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoucherExecutedEvent {
  export type InputTuple = [voucherId: BigNumberish];
  export type OutputTuple = [voucherId: bigint];
  export interface OutputObject {
    voucherId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CartesiDApp extends BaseContract {
  connect(runner?: ContractRunner | null): CartesiDApp;
  waitForDeployment(): Promise<this>;

  interface: CartesiDAppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeVoucher: TypedContractMethod<
    [_destination: AddressLike, _payload: BytesLike, _proof: ProofStruct],
    [boolean],
    "nonpayable"
  >;

  /**
   * Get the current consensus.
   */
  getConsensus: TypedContractMethod<[], [string], "view">;

  /**
   * Get the DApp's template hash.
   */
  getTemplateHash: TypedContractMethod<[], [string], "view">;

  /**
   * Can only be called by the DApp owner.
   * Migrate the DApp to a new consensus.
   * @param _newConsensus The new consensus
   */
  migrateToConsensus: TypedContractMethod<
    [_newConsensus: AddressLike],
    [void],
    "nonpayable"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  /**
   * See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.
   */
  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  /**
   * Returns the address of the current owner.
   */
  owner: TypedContractMethod<[], [string], "view">;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validateNotice: TypedContractMethod<
    [_notice: BytesLike, _proof: ProofStruct],
    [boolean],
    "view"
  >;

  /**
   * Check whether a voucher has been executed.
   * @param _inputIndex The index of the input in the input box
   * @param _outputIndexWithinInput The index of output emitted by the input
   */
  wasVoucherExecuted: TypedContractMethod<
    [_inputIndex: BigNumberish, _outputIndexWithinInput: BigNumberish],
    [boolean],
    "view"
  >;

  /**
   * This function can only be called by the DApp itself through vouchers.      If this method is not called by DApp itself, `OnlyDApp` error is raised.      If the transfer fails, `EtherTransferFailed` error is raised.
   * Transfer some amount of Ether to some recipient.
   * @param _receiver The address which will receive the amount of Ether
   * @param _value The amount of Ether to be transferred in Wei
   */
  withdrawEther: TypedContractMethod<
    [_receiver: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeVoucher"
  ): TypedContractMethod<
    [_destination: AddressLike, _payload: BytesLike, _proof: ProofStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConsensus"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTemplateHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "migrateToConsensus"
  ): TypedContractMethod<[_newConsensus: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateNotice"
  ): TypedContractMethod<
    [_notice: BytesLike, _proof: ProofStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "wasVoucherExecuted"
  ): TypedContractMethod<
    [_inputIndex: BigNumberish, _outputIndexWithinInput: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawEther"
  ): TypedContractMethod<
    [_receiver: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewConsensus"
  ): TypedContractEvent<
    NewConsensusEvent.InputTuple,
    NewConsensusEvent.OutputTuple,
    NewConsensusEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VoucherExecuted"
  ): TypedContractEvent<
    VoucherExecutedEvent.InputTuple,
    VoucherExecutedEvent.OutputTuple,
    VoucherExecutedEvent.OutputObject
  >;

  filters: {
    "NewConsensus(address)": TypedContractEvent<
      NewConsensusEvent.InputTuple,
      NewConsensusEvent.OutputTuple,
      NewConsensusEvent.OutputObject
    >;
    NewConsensus: TypedContractEvent<
      NewConsensusEvent.InputTuple,
      NewConsensusEvent.OutputTuple,
      NewConsensusEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VoucherExecuted(uint256)": TypedContractEvent<
      VoucherExecutedEvent.InputTuple,
      VoucherExecutedEvent.OutputTuple,
      VoucherExecutedEvent.OutputObject
    >;
    VoucherExecuted: TypedContractEvent<
      VoucherExecutedEvent.InputTuple,
      VoucherExecutedEvent.OutputTuple,
      VoucherExecutedEvent.OutputObject
    >;
  };
}
