/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace History {
  export type ClaimStruct = {
    epochHash: BytesLike;
    firstIndex: BigNumberish;
    lastIndex: BigNumberish;
  };

  export type ClaimStructOutput = [
    epochHash: string,
    firstIndex: bigint,
    lastIndex: bigint
  ] & { epochHash: string; firstIndex: bigint; lastIndex: bigint };
}

export interface HistoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getClaim"
      | "migrateToConsensus"
      | "owner"
      | "renounceOwnership"
      | "submitClaim"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewClaimToHistory" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getClaim",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToConsensus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace NewClaimToHistoryEvent {
  export type InputTuple = [dapp: AddressLike, claim: History.ClaimStruct];
  export type OutputTuple = [dapp: string, claim: History.ClaimStructOutput];
  export interface OutputObject {
    dapp: string;
    claim: History.ClaimStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface History extends BaseContract {
  connect(runner?: ContractRunner | null): History;
  waitForDeployment(): Promise<this>;

  interface: HistoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * If `claimIndex` is not inside the interval `[0, n)`, then      an `InvalidClaimIndex` error is raised.
   * Get a specific claim regarding a specific DApp. There are several requirements for this function to be called successfully. * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`). * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims   that have been submitted to `_dapp` already.
   * @param _dapp The DApp address
   * @param _proofContext Data for retrieving the desired claim
   */
  getClaim: TypedContractMethod<
    [_dapp: AddressLike, _proofContext: BytesLike],
    [[string, bigint, bigint]],
    "view"
  >;

  /**
   * Emits an `OwnershipTransferred` event. Should have access control.
   * Transfer ownership to another consensus.
   * @param _consensus The new consensus
   */
  migrateToConsensus: TypedContractMethod<
    [_consensus: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the address of the current owner.
   */
  owner: TypedContractMethod<[], [string], "view">;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * Emits a `NewClaimToHistory` event. Should have access control.      Incorrect claim input indices could raise two errors:      `InvalidInputIndices` if first index is posterior than last index or      `UnclaimedInputs` if first index is not the subsequent of previous claimed index or                        if the first index of the first claim is not zero.
   * Submit a claim regarding a DApp. There are several requirements for this function to be called successfully. * `_claimData` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)   and `claim` is the claim structure (type `Claim`). * `firstIndex` MUST be less than or equal to `lastIndex`.   As a result, every claim MUST encompass AT LEAST one input. * If this is the DApp's first claim, then `firstIndex` MUST be `0`.   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.   In other words, claims MUST NOT skip inputs.
   * @param _claimData Data for submitting a claim
   */
  submitClaim: TypedContractMethod<
    [_claimData: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [_dapp: AddressLike, _proofContext: BytesLike],
    [[string, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "migrateToConsensus"
  ): TypedContractMethod<[_consensus: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<[_claimData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "NewClaimToHistory"
  ): TypedContractEvent<
    NewClaimToHistoryEvent.InputTuple,
    NewClaimToHistoryEvent.OutputTuple,
    NewClaimToHistoryEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "NewClaimToHistory(address,tuple)": TypedContractEvent<
      NewClaimToHistoryEvent.InputTuple,
      NewClaimToHistoryEvent.OutputTuple,
      NewClaimToHistoryEvent.OutputObject
    >;
    NewClaimToHistory: TypedContractEvent<
      NewClaimToHistoryEvent.InputTuple,
      NewClaimToHistoryEvent.OutputTuple,
      NewClaimToHistoryEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
