/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AbstractConsensusInterface extends Interface {
  getFunction(nameOrSignature: "getClaim" | "join"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ApplicationJoined"): EventFragment;

  encodeFunctionData(
    functionFragment: "getClaim",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
}

export namespace ApplicationJoinedEvent {
  export type InputTuple = [application: AddressLike];
  export type OutputTuple = [application: string];
  export interface OutputObject {
    application: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AbstractConsensus extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractConsensus;
  waitForDeployment(): Promise<this>;

  interface: AbstractConsensusInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the implementation.
   * @param _dapp The DApp address
   * @param _proofContext Data for retrieving the desired claim
   */
  getClaim: TypedContractMethod<
    [_dapp: AddressLike, _proofContext: BytesLike],
    [
      [string, bigint, bigint] & {
        epochHash_: string;
        firstInputIndex_: bigint;
        lastInputIndex_: bigint;
      }
    ],
    "view"
  >;

  /**
   * Emits an `ApplicationJoined` event with the message sender.
   */
  join: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [_dapp: AddressLike, _proofContext: BytesLike],
    [
      [string, bigint, bigint] & {
        epochHash_: string;
        firstInputIndex_: bigint;
        lastInputIndex_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ApplicationJoined"
  ): TypedContractEvent<
    ApplicationJoinedEvent.InputTuple,
    ApplicationJoinedEvent.OutputTuple,
    ApplicationJoinedEvent.OutputObject
  >;

  filters: {
    "ApplicationJoined(address)": TypedContractEvent<
      ApplicationJoinedEvent.InputTuple,
      ApplicationJoinedEvent.OutputTuple,
      ApplicationJoinedEvent.OutputObject
    >;
    ApplicationJoined: TypedContractEvent<
      ApplicationJoinedEvent.InputTuple,
      ApplicationJoinedEvent.OutputTuple,
      ApplicationJoinedEvent.OutputObject
    >;
  };
}
