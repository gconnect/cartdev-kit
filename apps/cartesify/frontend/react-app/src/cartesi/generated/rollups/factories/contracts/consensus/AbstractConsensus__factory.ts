/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  AbstractConsensus,
  AbstractConsensusInterface,
} from "../../../contracts/consensus/AbstractConsensus";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "application",
        type: "address",
      },
    ],
    name: "ApplicationJoined",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dapp",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_proofContext",
        type: "bytes",
      },
    ],
    name: "getClaim",
    outputs: [
      {
        internalType: "bytes32",
        name: "epochHash_",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "firstInputIndex_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastInputIndex_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "join",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class AbstractConsensus__factory {
  static readonly abi = _abi;
  static createInterface(): AbstractConsensusInterface {
    return new Interface(_abi) as AbstractConsensusInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AbstractConsensus {
    return new Contract(address, _abi, runner) as unknown as AbstractConsensus;
  }
}
