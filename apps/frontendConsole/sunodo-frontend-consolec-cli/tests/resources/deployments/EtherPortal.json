{
  "address": "0x69004D282f1eD69Fc71d051e47b5d3944329fd07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_L2data",
          "type": "bytes"
        }
      ],
      "name": "depositEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInputBox",
      "outputs": [
        {
          "internalType": "contract IInputBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa63322bb8077a8bcbe930ef114e818bcb25d44cdf22eed70a77efd85573c7ff8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "255358",
    "logsBloom": "0x
    "blockHash": "0xfc3bdf40dfc89f5353892765ecdaaa770a03f335e5ebe3bcdbc5ebbc25dfe7ba",
    "transactionHash": "0xa63322bb8077a8bcbe930ef114e818bcb25d44cdf22eed70a77efd85573c7ff8",
    "logs": [],
    "blockNumber": 14,
    "cumulativeGasUsed": "255358",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x20BfA50d25ad25d7989eeAe9b0ed9F8bDcFb78bd"
  ],
  "numDeployments": 1,
  "solcInputHash": "5b784b24510fae6f20086d6daee4d1ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_L2data\",\"type\":\"bytes\"}],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInputBox\",\"outputs\":[{\"internalType\":\"contract IInputBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositEther(address,bytes)\":{\"details\":\"All the value sent through this function is forwarded to the DApp\",\"params\":{\"_L2data\":\"Additional data to be interpreted by L2\",\"_dapp\":\"The address of the DApp\"}},\"getInputBox()\":{\"returns\":{\"_0\":\"the input box\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositEther(address,bytes)\":{\"notice\":\"Transfer Ether to a DApp and add an input to         the DApp's input box to signal such operation.\"},\"getInputBox()\":{\"notice\":\"Get the input box used by this portal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/portals/EtherPortal.sol\":\"EtherPortal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/InputEncoding.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Input Encoding Library\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary InputEncoding {\\n    /// @notice ETH deposit\\n    bytes1 constant ETH_DEPOSIT = bytes1(0x00);\\n\\n    /// @notice ERC-20 token deposit where `transferFrom` returns `true`\\n    bytes1 constant ERC20_DEPOSIT_TRUE = bytes1(0x01);\\n\\n    /// @notice ERC-20 token deposit where `transferFrom` returns `false`\\n    bytes1 constant ERC20_DEPOSIT_FALSE = bytes1(0x02);\\n\\n    /// @notice ERC-721 token deposit\\n    bytes1 constant ERC721_DEPOSIT = bytes1(0x03);\\n\\n    /// @notice Encode Ether deposit\\n    /// @param sender The Ether sender\\n    /// @param value The amount of Ether being sent in Wei\\n    /// @param L2data Additional data to be interpreted by L2\\n    /// @return The encoded input\\n    function encodeEtherDeposit(\\n        address sender,\\n        uint256 value,\\n        bytes calldata L2data\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                ETH_DEPOSIT, // 1B\\n                sender, //      20B\\n                value, //       32B\\n                L2data //       arbitrary size\\n            );\\n    }\\n\\n    /// @notice Encode ERC-20 token deposit\\n    /// @param ret The return value of `transferFrom`\\n    /// @param token The token contract\\n    /// @param sender The token sender\\n    /// @param amount The amount of tokens being sent\\n    /// @param L2data Additional data to be interpreted by L2\\n    /// @return The encoded input\\n    function encodeERC20Deposit(\\n        bool ret,\\n        IERC20 token,\\n        address sender,\\n        uint256 amount,\\n        bytes calldata L2data\\n    ) internal pure returns (bytes memory) {\\n        bytes1 header = ret ? ERC20_DEPOSIT_TRUE : ERC20_DEPOSIT_FALSE;\\n        return\\n            abi.encodePacked(\\n                header, // 1B\\n                token, //  20B\\n                sender, // 20B\\n                amount, // 32B\\n                L2data //  arbitrary size\\n            );\\n    }\\n\\n    /// @notice Encode ERC-721 token deposit\\n    /// @param token The token contract\\n    /// @param sender The token sender\\n    /// @param tokenId The token identifier\\n    /// @param L1data Additional data to be interpreted by L1\\n    /// @param L2data Additional data to be interpreted by L2\\n    /// @return The encoded input\\n    /// @dev L1data should be forwarded to the ERC-721 token contract\\n    function encodeERC721Deposit(\\n        IERC721 token,\\n        address sender,\\n        uint256 tokenId,\\n        bytes calldata L1data,\\n        bytes calldata L2data\\n    ) internal pure returns (bytes memory) {\\n        bytes memory L1L2data = abi.encode(L1data, L2data);\\n        return\\n            abi.encodePacked(\\n                ERC721_DEPOSIT, // 1B\\n                token, //          20B\\n                sender, //         20B\\n                tokenId, //        32B\\n                L1L2data //        arbitrary size\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x59106b48cffd69f1c19acea7383406b8ae2f26a5347b740292123b7644546adb\",\"license\":\"Apache-2.0\"},\"contracts/inputs/IInputBox.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Input Box interface\\npragma solidity ^0.8.13;\\n\\ninterface IInputBox {\\n    /// @notice Emitted when an input is added to a DApp's input box\\n    /// @param dapp The address of the DApp\\n    /// @param inputIndex The index of the input\\n    /// @param sender The address that sent the input\\n    /// @param input The contents of the input\\n    event InputAdded(\\n        address indexed dapp,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        bytes input\\n    );\\n\\n    /// @notice Add an input to a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @param _input The contents of the input\\n    /// @return The hash of the input plus some extra metadata\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs in a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @return Number of inputs in the DApp's input box\\n    function getNumberOfInputs(address _dapp) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in a DApp's input box\\n    /// @param _dapp The address of the DApp\\n    /// @param _index The index of the input in the DApp's input box\\n    /// @return The hash of the input at the provided index in the DApp's input box\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x023bdabe4d55e248482f7fa9cb8bf3428f56bcd3106de4322f70dbbf1d425488\",\"license\":\"Apache-2.0\"},\"contracts/portals/EtherPortal.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Ether Portal\\npragma solidity ^0.8.13;\\n\\nimport {IEtherPortal} from \\\"./IEtherPortal.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {InputEncoding} from \\\"../common/InputEncoding.sol\\\";\\n\\ncontract EtherPortal is IEtherPortal {\\n    IInputBox immutable inputBox;\\n\\n    constructor(IInputBox _inputBox) {\\n        inputBox = _inputBox;\\n    }\\n\\n    function getInputBox() external view override returns (IInputBox) {\\n        return inputBox;\\n    }\\n\\n    function depositEther(\\n        address _dapp,\\n        bytes calldata _L2data\\n    ) external payable override {\\n        // We used to call `transfer()` but it's not considered safe,\\n        // as it assumes gas costs are immutable (they are not).\\n        (bool success, ) = _dapp.call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"EtherPortal: transfer failed\\\");\\n\\n        bytes memory input = InputEncoding.encodeEtherDeposit(\\n            msg.sender,\\n            msg.value,\\n            _L2data\\n        );\\n\\n        inputBox.addInput(_dapp, input);\\n    }\\n}\\n\",\"keccak256\":\"0x771c70a1ffacae7a03f3effc39a660b7621e850579435d44b408af6c2a0ba17a\",\"license\":\"Apache-2.0\"},\"contracts/portals/IEtherPortal.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Ether Portal\\npragma solidity ^0.8.13;\\n\\nimport {IPortal} from \\\"./IPortal.sol\\\";\\n\\ninterface IEtherPortal is IPortal {\\n    // Permissionless functions\\n\\n    /// @notice Transfer Ether to a DApp and add an input to\\n    ///         the DApp's input box to signal such operation.\\n    /// @param _dapp The address of the DApp\\n    /// @param _L2data Additional data to be interpreted by L2\\n    /// @dev All the value sent through this function is forwarded to the DApp\\n    function depositEther(\\n        address _dapp,\\n        bytes calldata _L2data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x7067feff2f4ef8882068534290012ddcbb5b51be597629637f7f8fa48688efea\",\"license\":\"Apache-2.0\"},\"contracts/portals/IPortal.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Portal\\npragma solidity ^0.8.13;\\n\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\n\\ninterface IPortal {\\n    // Permissionless functions\\n\\n    /// @notice Get the input box used by this portal\\n    /// @return the input box\\n    function getInputBox() external view returns (IInputBox);\\n}\\n\",\"keccak256\":\"0x3aeeaf2e1f794c93e7c5638317d6662c0fac27825c2216fc5caf18ad47f93c43\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161042f38038061042f83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161039e61009160003960008181603c015261015b015261039e6000f3fe6080604052600436106100285760003560e01c8062aace9a1461002d578063938c054f14610077575b600080fd5b34801561003957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006040516001600160a01b03909116815260200160405180910390f35b61008a610085366004610213565b61008c565b005b6000836001600160a01b03163460405160006040518083038185875af1925050503d80600081146100d9576040519150601f19603f3d011682016040523d82523d6000602084013e6100de565b606091505b50509050806101335760405162461bcd60e51b815260206004820152601c60248201527f4574686572506f7274616c3a207472616e73666572206661696c656400000000604482015260640160405180910390fd5b6000610141333486866101dd565b604051631789cd6360e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631789cd639061019290889085906004016102a4565b6020604051808303816000875af11580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d59190610309565b505050505050565b6040516060906101fa906000908790879087908790602001610322565b6040516020818303038152906040529050949350505050565b60008060006040848603121561022857600080fd5b83356001600160a01b038116811461023f57600080fd5b9250602084013567ffffffffffffffff8082111561025c57600080fd5b818601915086601f83011261027057600080fd5b81358181111561027f57600080fd5b87602082850101111561029157600080fd5b6020830194508093505050509250925092565b60018060a01b038316815260006020604081840152835180604085015260005b818110156102e0578581018301518582016060015282016102c4565b818111156102f2576000606083870101525b50601f01601f191692909201606001949350505050565b60006020828403121561031b57600080fd5b5051919050565b6001600160f81b031986168152606085901b6bffffffffffffffffffffffff1916600182015260158101849052818360358301376000910160350190815294935050505056fea26469706673582212206978ab131f27f4f1263ef2d0022a7ee144b7d4b5016c42a920b5fd7c8eb17cff64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100285760003560e01c8062aace9a1461002d578063938c054f14610077575b600080fd5b34801561003957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006040516001600160a01b03909116815260200160405180910390f35b61008a610085366004610213565b61008c565b005b6000836001600160a01b03163460405160006040518083038185875af1925050503d80600081146100d9576040519150601f19603f3d011682016040523d82523d6000602084013e6100de565b606091505b50509050806101335760405162461bcd60e51b815260206004820152601c60248201527f4574686572506f7274616c3a207472616e73666572206661696c656400000000604482015260640160405180910390fd5b6000610141333486866101dd565b604051631789cd6360e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631789cd639061019290889085906004016102a4565b6020604051808303816000875af11580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d59190610309565b505050505050565b6040516060906101fa906000908790879087908790602001610322565b6040516020818303038152906040529050949350505050565b60008060006040848603121561022857600080fd5b83356001600160a01b038116811461023f57600080fd5b9250602084013567ffffffffffffffff8082111561025c57600080fd5b818601915086601f83011261027057600080fd5b81358181111561027f57600080fd5b87602082850101111561029157600080fd5b6020830194508093505050509250925092565b60018060a01b038316815260006020604081840152835180604085015260005b818110156102e0578581018301518582016060015282016102c4565b818111156102f2576000606083870101525b50601f01601f191692909201606001949350505050565b60006020828403121561031b57600080fd5b5051919050565b6001600160f81b031986168152606085901b6bffffffffffffffffffffffff1916600182015260158101849052818360358301376000910160350190815294935050505056fea26469706673582212206978ab131f27f4f1263ef2d0022a7ee144b7d4b5016c42a920b5fd7c8eb17cff64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositEther(address,bytes)": {
        "details": "All the value sent through this function is forwarded to the DApp",
        "params": {
          "_L2data": "Additional data to be interpreted by L2",
          "_dapp": "The address of the DApp"
        }
      },
      "getInputBox()": {
        "returns": {
          "_0": "the input box"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositEther(address,bytes)": {
        "notice": "Transfer Ether to a DApp and add an input to         the DApp's input box to signal such operation."
      },
      "getInputBox()": {
        "notice": "Get the input box used by this portal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}