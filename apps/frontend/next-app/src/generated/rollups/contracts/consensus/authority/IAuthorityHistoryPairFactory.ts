/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IAuthorityHistoryPairFactoryInterface extends utils.Interface {
  functions: {
    "calculateAuthorityHistoryAddressPair(address,bytes32)": FunctionFragment;
    "getAuthorityFactory()": FunctionFragment;
    "getHistoryFactory()": FunctionFragment;
    "newAuthorityHistoryPair(address)": FunctionFragment;
    "newAuthorityHistoryPair(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateAuthorityHistoryAddressPair"
      | "getAuthorityFactory"
      | "getHistoryFactory"
      | "newAuthorityHistoryPair(address)"
      | "newAuthorityHistoryPair(address,bytes32)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateAuthorityHistoryAddressPair",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoryFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAuthorityHistoryPair(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newAuthorityHistoryPair(address,bytes32)",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAuthorityHistoryAddressPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoryFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAuthorityHistoryPair(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAuthorityHistoryPair(address,bytes32)",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityHistoryPairFactoryCreated(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AuthorityHistoryPairFactoryCreated"
  ): EventFragment;
}

export interface AuthorityHistoryPairFactoryCreatedEventObject {
  authorityFactory: string;
  historyFactory: string;
}
export type AuthorityHistoryPairFactoryCreatedEvent = TypedEvent<
  [string, string],
  AuthorityHistoryPairFactoryCreatedEventObject
>;

export type AuthorityHistoryPairFactoryCreatedEventFilter =
  TypedEventFilter<AuthorityHistoryPairFactoryCreatedEvent>;

export interface IAuthorityHistoryPairFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAuthorityHistoryPairFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Beware that only the `newAuthorityHistoryPair` function with the `_salt` parameter      is able to deterministically deploy an authority-history pair.
     * Calculate the address of an authority-history pair to be deployed deterministically.
     * @param _authorityOwner The initial authority owner
     * @param _salt The salt used to deterministically generate the authority-history address pair
     */
    calculateAuthorityHistoryAddressPair(
      _authorityOwner: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Get the factory used to deploy `Authority` contracts
     */
    getAuthorityFactory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Get the factory used to deploy `History` contracts
     */
    getHistoryFactory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Deploy a new authority-history pair.
     * @param _authorityOwner The initial authority owner
     */
    "newAuthorityHistoryPair(address)"(
      _authorityOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Deploy a new authority-history pair deterministically.
     * @param _authorityOwner The initial authority owner
     * @param _salt The salt used to deterministically generate the authority-history pair address
     */
    "newAuthorityHistoryPair(address,bytes32)"(
      _authorityOwner: string,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Beware that only the `newAuthorityHistoryPair` function with the `_salt` parameter      is able to deterministically deploy an authority-history pair.
   * Calculate the address of an authority-history pair to be deployed deterministically.
   * @param _authorityOwner The initial authority owner
   * @param _salt The salt used to deterministically generate the authority-history address pair
   */
  calculateAuthorityHistoryAddressPair(
    _authorityOwner: string,
    _salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  /**
   * Get the factory used to deploy `Authority` contracts
   */
  getAuthorityFactory(overrides?: CallOverrides): Promise<string>;

  /**
   * Get the factory used to deploy `History` contracts
   */
  getHistoryFactory(overrides?: CallOverrides): Promise<string>;

  /**
   * Deploy a new authority-history pair.
   * @param _authorityOwner The initial authority owner
   */
  "newAuthorityHistoryPair(address)"(
    _authorityOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Deploy a new authority-history pair deterministically.
   * @param _authorityOwner The initial authority owner
   * @param _salt The salt used to deterministically generate the authority-history pair address
   */
  "newAuthorityHistoryPair(address,bytes32)"(
    _authorityOwner: string,
    _salt: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Beware that only the `newAuthorityHistoryPair` function with the `_salt` parameter      is able to deterministically deploy an authority-history pair.
     * Calculate the address of an authority-history pair to be deployed deterministically.
     * @param _authorityOwner The initial authority owner
     * @param _salt The salt used to deterministically generate the authority-history address pair
     */
    calculateAuthorityHistoryAddressPair(
      _authorityOwner: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Get the factory used to deploy `Authority` contracts
     */
    getAuthorityFactory(overrides?: CallOverrides): Promise<string>;

    /**
     * Get the factory used to deploy `History` contracts
     */
    getHistoryFactory(overrides?: CallOverrides): Promise<string>;

    /**
     * Deploy a new authority-history pair.
     * @param _authorityOwner The initial authority owner
     */
    "newAuthorityHistoryPair(address)"(
      _authorityOwner: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Deploy a new authority-history pair deterministically.
     * @param _authorityOwner The initial authority owner
     * @param _salt The salt used to deterministically generate the authority-history pair address
     */
    "newAuthorityHistoryPair(address,bytes32)"(
      _authorityOwner: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;
  };

  filters: {
    "AuthorityHistoryPairFactoryCreated(address,address)"(
      authorityFactory?: null,
      historyFactory?: null
    ): AuthorityHistoryPairFactoryCreatedEventFilter;
    AuthorityHistoryPairFactoryCreated(
      authorityFactory?: null,
      historyFactory?: null
    ): AuthorityHistoryPairFactoryCreatedEventFilter;
  };

  estimateGas: {
    /**
     * Beware that only the `newAuthorityHistoryPair` function with the `_salt` parameter      is able to deterministically deploy an authority-history pair.
     * Calculate the address of an authority-history pair to be deployed deterministically.
     * @param _authorityOwner The initial authority owner
     * @param _salt The salt used to deterministically generate the authority-history address pair
     */
    calculateAuthorityHistoryAddressPair(
      _authorityOwner: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the factory used to deploy `Authority` contracts
     */
    getAuthorityFactory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the factory used to deploy `History` contracts
     */
    getHistoryFactory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Deploy a new authority-history pair.
     * @param _authorityOwner The initial authority owner
     */
    "newAuthorityHistoryPair(address)"(
      _authorityOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Deploy a new authority-history pair deterministically.
     * @param _authorityOwner The initial authority owner
     * @param _salt The salt used to deterministically generate the authority-history pair address
     */
    "newAuthorityHistoryPair(address,bytes32)"(
      _authorityOwner: string,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Beware that only the `newAuthorityHistoryPair` function with the `_salt` parameter      is able to deterministically deploy an authority-history pair.
     * Calculate the address of an authority-history pair to be deployed deterministically.
     * @param _authorityOwner The initial authority owner
     * @param _salt The salt used to deterministically generate the authority-history address pair
     */
    calculateAuthorityHistoryAddressPair(
      _authorityOwner: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the factory used to deploy `Authority` contracts
     */
    getAuthorityFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the factory used to deploy `History` contracts
     */
    getHistoryFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Deploy a new authority-history pair.
     * @param _authorityOwner The initial authority owner
     */
    "newAuthorityHistoryPair(address)"(
      _authorityOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Deploy a new authority-history pair deterministically.
     * @param _authorityOwner The initial authority owner
     * @param _salt The salt used to deterministically generate the authority-history pair address
     */
    "newAuthorityHistoryPair(address,bytes32)"(
      _authorityOwner: string,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
