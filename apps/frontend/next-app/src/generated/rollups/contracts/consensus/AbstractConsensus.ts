/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface AbstractConsensusInterface extends utils.Interface {
  functions: {
    "getClaim(address,bytes)": FunctionFragment;
    "join()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getClaim" | "join"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getClaim",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;

  events: {
    "ApplicationJoined(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApplicationJoined"): EventFragment;
}

export interface ApplicationJoinedEventObject {
  application: string;
}
export type ApplicationJoinedEvent = TypedEvent<
  [string],
  ApplicationJoinedEventObject
>;

export type ApplicationJoinedEventFilter =
  TypedEventFilter<ApplicationJoinedEvent>;

export interface AbstractConsensus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbstractConsensusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the implementation.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        epochHash_: string;
        firstInputIndex_: BigNumber;
        lastInputIndex_: BigNumber;
      }
    >;

    /**
     * Emits an `ApplicationJoined` event with the message sender.
     */
    join(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the implementation.
   * @param _dapp The DApp address
   * @param _proofContext Data for retrieving the desired claim
   */
  getClaim(
    _dapp: string,
    _proofContext: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      epochHash_: string;
      firstInputIndex_: BigNumber;
      lastInputIndex_: BigNumber;
    }
  >;

  /**
   * Emits an `ApplicationJoined` event with the message sender.
   */
  join(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the implementation.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        epochHash_: string;
        firstInputIndex_: BigNumber;
        lastInputIndex_: BigNumber;
      }
    >;

    /**
     * Emits an `ApplicationJoined` event with the message sender.
     */
    join(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ApplicationJoined(address)"(
      application?: null
    ): ApplicationJoinedEventFilter;
    ApplicationJoined(application?: null): ApplicationJoinedEventFilter;
  };

  estimateGas: {
    /**
     * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the implementation.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Emits an `ApplicationJoined` event with the message sender.
     */
    join(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the implementation.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Emits an `ApplicationJoined` event with the message sender.
     */
    join(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
