/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface AuthorityInterface extends utils.Interface {
  functions: {
    "getClaim(address,bytes)": FunctionFragment;
    "getHistory()": FunctionFragment;
    "join()": FunctionFragment;
    "migrateHistoryToConsensus(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setHistory(address)": FunctionFragment;
    "submitClaim(bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawERC20Tokens(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getClaim"
      | "getHistory"
      | "join"
      | "migrateHistoryToConsensus"
      | "owner"
      | "renounceOwnership"
      | "setHistory"
      | "submitClaim"
      | "transferOwnership"
      | "withdrawERC20Tokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getClaim",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateHistoryToConsensus",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setHistory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Tokens",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHistory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateHistoryToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Tokens",
    data: BytesLike
  ): Result;

  events: {
    "ApplicationJoined(address)": EventFragment;
    "NewHistory(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApplicationJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHistory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ApplicationJoinedEventObject {
  application: string;
}
export type ApplicationJoinedEvent = TypedEvent<
  [string],
  ApplicationJoinedEventObject
>;

export type ApplicationJoinedEventFilter =
  TypedEventFilter<ApplicationJoinedEvent>;

export interface NewHistoryEventObject {
  history: string;
}
export type NewHistoryEvent = TypedEvent<[string], NewHistoryEventObject>;

export type NewHistoryEventFilter = TypedEventFilter<NewHistoryEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Authority extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuthorityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Get a claim from the current history.         The encoding of `_proofContext` might vary depending on the         implementation of the current history contract.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    /**
     * Get the current history contract.
     */
    getHistory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Emits an `ApplicationJoined` event with the message sender.
     */
    join(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
     * Transfer ownership over the current history contract to `_consensus`.
     * @param _consensus The new owner of the current history contract
     */
    migrateHistoryToConsensus(
      _consensus: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Emits a `NewHistory` event.      Can only be called by the `Authority` owner.
     * Make `Authority` point to another history contract.
     * @param _history The new history contract
     */
    setHistory(
      _history: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
     * Submits a claim to the current history contract.         The encoding of `_claimData` might vary depending on the         implementation of the current history contract.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by the `Authority` owner.
     * Transfer some amount of ERC-20 tokens to a recipient.
     * @param _amount The amount of tokens to be withdrawn
     * @param _recipient The recipient address
     * @param _token The token contract
     */
    withdrawERC20Tokens(
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Get a claim from the current history.         The encoding of `_proofContext` might vary depending on the         implementation of the current history contract.
   * @param _dapp The DApp address
   * @param _proofContext Data for retrieving the desired claim
   */
  getClaim(
    _dapp: string,
    _proofContext: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber]>;

  /**
   * Get the current history contract.
   */
  getHistory(overrides?: CallOverrides): Promise<string>;

  /**
   * Emits an `ApplicationJoined` event with the message sender.
   */
  join(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  /**
   * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
   * Transfer ownership over the current history contract to `_consensus`.
   * @param _consensus The new owner of the current history contract
   */
  migrateHistoryToConsensus(
    _consensus: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Emits a `NewHistory` event.      Can only be called by the `Authority` owner.
   * Make `Authority` point to another history contract.
   * @param _history The new history contract
   */
  setHistory(
    _history: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
   * Submits a claim to the current history contract.         The encoding of `_claimData` might vary depending on the         implementation of the current history contract.
   * @param _claimData Data for submitting a claim
   */
  submitClaim(
    _claimData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by the `Authority` owner.
   * Transfer some amount of ERC-20 tokens to a recipient.
   * @param _amount The amount of tokens to be withdrawn
   * @param _recipient The recipient address
   * @param _token The token contract
   */
  withdrawERC20Tokens(
    _token: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Get a claim from the current history.         The encoding of `_proofContext` might vary depending on the         implementation of the current history contract.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    /**
     * Get the current history contract.
     */
    getHistory(overrides?: CallOverrides): Promise<string>;

    /**
     * Emits an `ApplicationJoined` event with the message sender.
     */
    join(overrides?: CallOverrides): Promise<void>;

    /**
     * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
     * Transfer ownership over the current history contract to `_consensus`.
     * @param _consensus The new owner of the current history contract
     */
    migrateHistoryToConsensus(
      _consensus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Emits a `NewHistory` event.      Can only be called by the `Authority` owner.
     * Make `Authority` point to another history contract.
     * @param _history The new history contract
     */
    setHistory(_history: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
     * Submits a claim to the current history contract.         The encoding of `_claimData` might vary depending on the         implementation of the current history contract.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Can only be called by the `Authority` owner.
     * Transfer some amount of ERC-20 tokens to a recipient.
     * @param _amount The amount of tokens to be withdrawn
     * @param _recipient The recipient address
     * @param _token The token contract
     */
    withdrawERC20Tokens(
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApplicationJoined(address)"(
      application?: null
    ): ApplicationJoinedEventFilter;
    ApplicationJoined(application?: null): ApplicationJoinedEventFilter;

    "NewHistory(address)"(history?: null): NewHistoryEventFilter;
    NewHistory(history?: null): NewHistoryEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    /**
     * Get a claim from the current history.         The encoding of `_proofContext` might vary depending on the         implementation of the current history contract.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the current history contract.
     */
    getHistory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Emits an `ApplicationJoined` event with the message sender.
     */
    join(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
     * Transfer ownership over the current history contract to `_consensus`.
     * @param _consensus The new owner of the current history contract
     */
    migrateHistoryToConsensus(
      _consensus: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Emits a `NewHistory` event.      Can only be called by the `Authority` owner.
     * Make `Authority` point to another history contract.
     * @param _history The new history contract
     */
    setHistory(
      _history: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
     * Submits a claim to the current history contract.         The encoding of `_claimData` might vary depending on the         implementation of the current history contract.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Can only be called by the `Authority` owner.
     * Transfer some amount of ERC-20 tokens to a recipient.
     * @param _amount The amount of tokens to be withdrawn
     * @param _recipient The recipient address
     * @param _token The token contract
     */
    withdrawERC20Tokens(
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Get a claim from the current history.         The encoding of `_proofContext` might vary depending on the         implementation of the current history contract.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the current history contract.
     */
    getHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Emits an `ApplicationJoined` event with the message sender.
     */
    join(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
     * Transfer ownership over the current history contract to `_consensus`.
     * @param _consensus The new owner of the current history contract
     */
    migrateHistoryToConsensus(
      _consensus: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Emits a `NewHistory` event.      Can only be called by the `Authority` owner.
     * Make `Authority` point to another history contract.
     * @param _history The new history contract
     */
    setHistory(
      _history: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
     * Submits a claim to the current history contract.         The encoding of `_claimData` might vary depending on the         implementation of the current history contract.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the `Authority` owner.
     * Transfer some amount of ERC-20 tokens to a recipient.
     * @param _amount The amount of tokens to be withdrawn
     * @param _recipient The recipient address
     * @param _token The token contract
     */
    withdrawERC20Tokens(
      _token: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
