/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace History {
  export type ClaimStruct = {
    epochHash: BytesLike;
    firstIndex: BigNumberish;
    lastIndex: BigNumberish;
  };

  export type ClaimStructOutput = [string, BigNumber, BigNumber] & {
    epochHash: string;
    firstIndex: BigNumber;
    lastIndex: BigNumber;
  };
}

export interface HistoryInterface extends utils.Interface {
  functions: {
    "getClaim(address,bytes)": FunctionFragment;
    "migrateToConsensus(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "submitClaim(bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getClaim"
      | "migrateToConsensus"
      | "owner"
      | "renounceOwnership"
      | "submitClaim"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getClaim",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToConsensus",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewClaimToHistory(address,(bytes32,uint128,uint128))": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewClaimToHistory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface NewClaimToHistoryEventObject {
  dapp: string;
  claim: History.ClaimStructOutput;
}
export type NewClaimToHistoryEvent = TypedEvent<
  [string, History.ClaimStructOutput],
  NewClaimToHistoryEventObject
>;

export type NewClaimToHistoryEventFilter =
  TypedEventFilter<NewClaimToHistoryEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface History extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HistoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * If `claimIndex` is not inside the interval `[0, n)`, then      an `InvalidClaimIndex` error is raised.
     * Get a specific claim regarding a specific DApp. There are several requirements for this function to be called successfully. * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`). * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims   that have been submitted to `_dapp` already.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    /**
     * Emits an `OwnershipTransferred` event. Should have access control.
     * Transfer ownership to another consensus.
     * @param _consensus The new consensus
     */
    migrateToConsensus(
      _consensus: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Emits a `NewClaimToHistory` event. Should have access control.      Incorrect claim input indices could raise two errors:      `InvalidInputIndices` if first index is posterior than last index or      `UnclaimedInputs` if first index is not the subsequent of previous claimed index or                        if the first index of the first claim is not zero.
     * Submit a claim regarding a DApp. There are several requirements for this function to be called successfully. * `_claimData` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)   and `claim` is the claim structure (type `Claim`). * `firstIndex` MUST be less than or equal to `lastIndex`.   As a result, every claim MUST encompass AT LEAST one input. * If this is the DApp's first claim, then `firstIndex` MUST be `0`.   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.   In other words, claims MUST NOT skip inputs.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * If `claimIndex` is not inside the interval `[0, n)`, then      an `InvalidClaimIndex` error is raised.
   * Get a specific claim regarding a specific DApp. There are several requirements for this function to be called successfully. * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`). * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims   that have been submitted to `_dapp` already.
   * @param _dapp The DApp address
   * @param _proofContext Data for retrieving the desired claim
   */
  getClaim(
    _dapp: string,
    _proofContext: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber]>;

  /**
   * Emits an `OwnershipTransferred` event. Should have access control.
   * Transfer ownership to another consensus.
   * @param _consensus The new consensus
   */
  migrateToConsensus(
    _consensus: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Emits a `NewClaimToHistory` event. Should have access control.      Incorrect claim input indices could raise two errors:      `InvalidInputIndices` if first index is posterior than last index or      `UnclaimedInputs` if first index is not the subsequent of previous claimed index or                        if the first index of the first claim is not zero.
   * Submit a claim regarding a DApp. There are several requirements for this function to be called successfully. * `_claimData` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)   and `claim` is the claim structure (type `Claim`). * `firstIndex` MUST be less than or equal to `lastIndex`.   As a result, every claim MUST encompass AT LEAST one input. * If this is the DApp's first claim, then `firstIndex` MUST be `0`.   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.   In other words, claims MUST NOT skip inputs.
   * @param _claimData Data for submitting a claim
   */
  submitClaim(
    _claimData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * If `claimIndex` is not inside the interval `[0, n)`, then      an `InvalidClaimIndex` error is raised.
     * Get a specific claim regarding a specific DApp. There are several requirements for this function to be called successfully. * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`). * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims   that have been submitted to `_dapp` already.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    /**
     * Emits an `OwnershipTransferred` event. Should have access control.
     * Transfer ownership to another consensus.
     * @param _consensus The new consensus
     */
    migrateToConsensus(
      _consensus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Emits a `NewClaimToHistory` event. Should have access control.      Incorrect claim input indices could raise two errors:      `InvalidInputIndices` if first index is posterior than last index or      `UnclaimedInputs` if first index is not the subsequent of previous claimed index or                        if the first index of the first claim is not zero.
     * Submit a claim regarding a DApp. There are several requirements for this function to be called successfully. * `_claimData` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)   and `claim` is the claim structure (type `Claim`). * `firstIndex` MUST be less than or equal to `lastIndex`.   As a result, every claim MUST encompass AT LEAST one input. * If this is the DApp's first claim, then `firstIndex` MUST be `0`.   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.   In other words, claims MUST NOT skip inputs.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewClaimToHistory(address,(bytes32,uint128,uint128))"(
      dapp?: string | null,
      claim?: null
    ): NewClaimToHistoryEventFilter;
    NewClaimToHistory(
      dapp?: string | null,
      claim?: null
    ): NewClaimToHistoryEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    /**
     * If `claimIndex` is not inside the interval `[0, n)`, then      an `InvalidClaimIndex` error is raised.
     * Get a specific claim regarding a specific DApp. There are several requirements for this function to be called successfully. * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`). * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims   that have been submitted to `_dapp` already.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Emits an `OwnershipTransferred` event. Should have access control.
     * Transfer ownership to another consensus.
     * @param _consensus The new consensus
     */
    migrateToConsensus(
      _consensus: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Emits a `NewClaimToHistory` event. Should have access control.      Incorrect claim input indices could raise two errors:      `InvalidInputIndices` if first index is posterior than last index or      `UnclaimedInputs` if first index is not the subsequent of previous claimed index or                        if the first index of the first claim is not zero.
     * Submit a claim regarding a DApp. There are several requirements for this function to be called successfully. * `_claimData` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)   and `claim` is the claim structure (type `Claim`). * `firstIndex` MUST be less than or equal to `lastIndex`.   As a result, every claim MUST encompass AT LEAST one input. * If this is the DApp's first claim, then `firstIndex` MUST be `0`.   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.   In other words, claims MUST NOT skip inputs.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * If `claimIndex` is not inside the interval `[0, n)`, then      an `InvalidClaimIndex` error is raised.
     * Get a specific claim regarding a specific DApp. There are several requirements for this function to be called successfully. * `_proofContext` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(claimIndex)`, where `claimIndex` is the claim index (type `uint256`). * `claimIndex` MUST be inside the interval `[0, n)` where `n` is the number of claims   that have been submitted to `_dapp` already.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: string,
      _proofContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Emits an `OwnershipTransferred` event. Should have access control.
     * Transfer ownership to another consensus.
     * @param _consensus The new consensus
     */
    migrateToConsensus(
      _consensus: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Emits a `NewClaimToHistory` event. Should have access control.      Incorrect claim input indices could raise two errors:      `InvalidInputIndices` if first index is posterior than last index or      `UnclaimedInputs` if first index is not the subsequent of previous claimed index or                        if the first index of the first claim is not zero.
     * Submit a claim regarding a DApp. There are several requirements for this function to be called successfully. * `_claimData` MUST be well-encoded. In Solidity, it can be constructed   as `abi.encode(dapp, claim)`, where `dapp` is the DApp address (type `address`)   and `claim` is the claim structure (type `Claim`). * `firstIndex` MUST be less than or equal to `lastIndex`.   As a result, every claim MUST encompass AT LEAST one input. * If this is the DApp's first claim, then `firstIndex` MUST be `0`.   Otherwise, `firstIndex` MUST be the `lastClaim.lastIndex + 1`.   In other words, claims MUST NOT skip inputs.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
