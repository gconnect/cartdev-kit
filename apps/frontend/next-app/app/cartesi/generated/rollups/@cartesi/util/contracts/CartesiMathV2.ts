/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface CartesiMathV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "clz"
      | "ctz"
      | "getLog2Floor"
      | "getLog2TableTimes1M"
      | "isPowerOf2"
      | "log2ApproxTimes1M"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "clz", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ctz", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getLog2Floor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLog2TableTimes1M",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPowerOf2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "log2ApproxTimes1M",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "clz", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ctz", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLog2Floor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLog2TableTimes1M",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPowerOf2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "log2ApproxTimes1M",
    data: BytesLike
  ): Result;
}

export interface CartesiMathV2 extends BaseContract {
  connect(runner?: ContractRunner | null): CartesiMathV2;
  waitForDeployment(): Promise<this>;

  interface: CartesiMathV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * this a binary search implementation
   * count leading zeros
   * @param _num number you want the clz of
   */
  clz: TypedContractMethod<[_num: BigNumberish], [bigint], "view">;

  /**
   * this a binary search implementation
   * count trailing zeros
   * @param _num number you want the ctz of
   */
  ctz: TypedContractMethod<[_num: BigNumberish], [bigint], "view">;

  /**
   * get floor of log2 of number
   * @param _num number to take floor(log2) of
   */
  getLog2Floor: TypedContractMethod<[_num: BigNumberish], [bigint], "view">;

  /**
   * navigates log2tableTimes1M
   * @param _num number to take log2 of
   */
  getLog2TableTimes1M: TypedContractMethod<
    [_num: BigNumberish],
    [bigint],
    "view"
  >;

  /**
   * checks if a number is Power of 2
   * @param _num number to check
   */
  isPowerOf2: TypedContractMethod<[_num: BigNumberish], [boolean], "view">;

  /**
   * Approximates log2 * 1M
   * @param _num number to take log2 * 1M of
   */
  log2ApproxTimes1M: TypedContractMethod<
    [_num: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clz"
  ): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ctz"
  ): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLog2Floor"
  ): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLog2TableTimes1M"
  ): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isPowerOf2"
  ): TypedContractMethod<[_num: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "log2ApproxTimes1M"
  ): TypedContractMethod<[_num: BigNumberish], [bigint], "view">;

  filters: {};
}
