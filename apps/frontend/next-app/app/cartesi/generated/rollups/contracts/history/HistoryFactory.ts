/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface HistoryFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateHistoryAddress"
      | "newHistory(address,bytes32)"
      | "newHistory(address)"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "HistoryCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateHistoryAddress",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newHistory(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newHistory(address)",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateHistoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newHistory(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newHistory(address)",
    data: BytesLike
  ): Result;
}

export namespace HistoryCreatedEvent {
  export type InputTuple = [historyOwner: AddressLike, history: AddressLike];
  export type OutputTuple = [historyOwner: string, history: string];
  export interface OutputObject {
    historyOwner: string;
    history: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HistoryFactory extends BaseContract {
  connect(runner?: ContractRunner | null): HistoryFactory;
  waitForDeployment(): Promise<this>;

  interface: HistoryFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Beware that only the `newHistory` function with the `_salt` parameter      is able to deterministically deploy a history.
   * Calculate the address of a history to be deployed deterministically.
   * @param _historyOwner The initial history owner
   * @param _salt The salt used to deterministically generate the history address
   */
  calculateHistoryAddress: TypedContractMethod<
    [_historyOwner: AddressLike, _salt: BytesLike],
    [string],
    "view"
  >;

  /**
   * On success, MUST emit a `HistoryCreated` event.
   * Deploy a new history deterministically.
   * @param _historyOwner The initial history owner
   * @param _salt The salt used to deterministically generate the history address
   */
  "newHistory(address,bytes32)": TypedContractMethod<
    [_historyOwner: AddressLike, _salt: BytesLike],
    [string],
    "nonpayable"
  >;

  /**
   * On success, MUST emit a `HistoryCreated` event.
   * Deploy a new history.
   * @param _historyOwner The initial history owner
   */
  "newHistory(address)": TypedContractMethod<
    [_historyOwner: AddressLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateHistoryAddress"
  ): TypedContractMethod<
    [_historyOwner: AddressLike, _salt: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "newHistory(address,bytes32)"
  ): TypedContractMethod<
    [_historyOwner: AddressLike, _salt: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newHistory(address)"
  ): TypedContractMethod<[_historyOwner: AddressLike], [string], "nonpayable">;

  getEvent(
    key: "HistoryCreated"
  ): TypedContractEvent<
    HistoryCreatedEvent.InputTuple,
    HistoryCreatedEvent.OutputTuple,
    HistoryCreatedEvent.OutputObject
  >;

  filters: {
    "HistoryCreated(address,address)": TypedContractEvent<
      HistoryCreatedEvent.InputTuple,
      HistoryCreatedEvent.OutputTuple,
      HistoryCreatedEvent.OutputObject
    >;
    HistoryCreated: TypedContractEvent<
      HistoryCreatedEvent.InputTuple,
      HistoryCreatedEvent.OutputTuple,
      HistoryCreatedEvent.OutputObject
    >;
  };
}
