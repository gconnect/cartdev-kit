/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICartesiDAppFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateApplicationAddress"
      | "newApplication(address,address,bytes32,bytes32)"
      | "newApplication(address,address,bytes32)"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ApplicationCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateApplicationAddress",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newApplication(address,address,bytes32,bytes32)",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newApplication(address,address,bytes32)",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateApplicationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newApplication(address,address,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newApplication(address,address,bytes32)",
    data: BytesLike
  ): Result;
}

export namespace ApplicationCreatedEvent {
  export type InputTuple = [
    consensus: AddressLike,
    dappOwner: AddressLike,
    templateHash: BytesLike,
    application: AddressLike
  ];
  export type OutputTuple = [
    consensus: string,
    dappOwner: string,
    templateHash: string,
    application: string
  ];
  export interface OutputObject {
    consensus: string;
    dappOwner: string;
    templateHash: string;
    application: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICartesiDAppFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ICartesiDAppFactory;
  waitForDeployment(): Promise<this>;

  interface: ICartesiDAppFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Beware that only the `newApplication` function with the `_salt` parameter      is able to deterministically deploy an application.
   * Calculate the address of an application to be deployed deterministically.
   * @param _consensus The initial consensus contract
   * @param _dappOwner The initial DApp owner
   * @param _salt The salt used to deterministically generate the DApp address
   * @param _templateHash The initial machine state hash
   */
  calculateApplicationAddress: TypedContractMethod<
    [
      _consensus: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike,
      _salt: BytesLike
    ],
    [string],
    "view"
  >;

  /**
   * On success, MUST emit an `ApplicationCreated` event.
   * Deploy a new application deterministically.
   * @param _consensus The initial consensus contract
   * @param _dappOwner The initial DApp owner
   * @param _salt The salt used to deterministically generate the DApp address
   * @param _templateHash The initial machine state hash
   */
  "newApplication(address,address,bytes32,bytes32)": TypedContractMethod<
    [
      _consensus: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike,
      _salt: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  /**
   * On success, MUST emit an `ApplicationCreated` event.
   * Deploy a new application.
   * @param _consensus The initial consensus contract
   * @param _dappOwner The initial DApp owner
   * @param _templateHash The initial machine state hash
   */
  "newApplication(address,address,bytes32)": TypedContractMethod<
    [
      _consensus: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateApplicationAddress"
  ): TypedContractMethod<
    [
      _consensus: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike,
      _salt: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "newApplication(address,address,bytes32,bytes32)"
  ): TypedContractMethod<
    [
      _consensus: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike,
      _salt: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newApplication(address,address,bytes32)"
  ): TypedContractMethod<
    [
      _consensus: AddressLike,
      _dappOwner: AddressLike,
      _templateHash: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "ApplicationCreated"
  ): TypedContractEvent<
    ApplicationCreatedEvent.InputTuple,
    ApplicationCreatedEvent.OutputTuple,
    ApplicationCreatedEvent.OutputObject
  >;

  filters: {
    "ApplicationCreated(address,address,bytes32,address)": TypedContractEvent<
      ApplicationCreatedEvent.InputTuple,
      ApplicationCreatedEvent.OutputTuple,
      ApplicationCreatedEvent.OutputObject
    >;
    ApplicationCreated: TypedContractEvent<
      ApplicationCreatedEvent.InputTuple,
      ApplicationCreatedEvent.OutputTuple,
      ApplicationCreatedEvent.OutputObject
    >;
  };
}
