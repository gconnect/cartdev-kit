/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IHistoryInterface extends Interface {
  getFunction(
    nameOrSignature: "getClaim" | "migrateToConsensus" | "submitClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getClaim",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToConsensus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
}

export interface IHistory extends BaseContract {
  connect(runner?: ContractRunner | null): IHistory;
  waitForDeployment(): Promise<this>;

  interface: IHistoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the history implementation.
   * @param _dapp The DApp address
   * @param _proofContext Data for retrieving the desired claim
   */
  getClaim: TypedContractMethod<
    [_dapp: AddressLike, _proofContext: BytesLike],
    [
      [string, bigint, bigint] & {
        epochHash_: string;
        firstInputIndex_: bigint;
        lastInputIndex_: bigint;
      }
    ],
    "view"
  >;

  /**
   * Should have access control.
   * Transfer ownership to another consensus.
   * @param _consensus The new consensus
   */
  migrateToConsensus: TypedContractMethod<
    [_consensus: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Should have access control.
   * Submit a claim.         The encoding of `_claimData` might vary         depending on the history implementation.
   * @param _claimData Data for submitting a claim
   */
  submitClaim: TypedContractMethod<
    [_claimData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [_dapp: AddressLike, _proofContext: BytesLike],
    [
      [string, bigint, bigint] & {
        epochHash_: string;
        firstInputIndex_: bigint;
        lastInputIndex_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "migrateToConsensus"
  ): TypedContractMethod<[_consensus: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<[_claimData: BytesLike], [void], "nonpayable">;

  filters: {};
}
