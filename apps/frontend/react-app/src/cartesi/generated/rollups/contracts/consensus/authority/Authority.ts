/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface AuthorityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getClaim"
      | "getHistory"
      | "join"
      | "migrateHistoryToConsensus"
      | "owner"
      | "renounceOwnership"
      | "setHistory"
      | "submitClaim"
      | "transferOwnership"
      | "withdrawERC20Tokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApplicationJoined"
      | "NewHistory"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getClaim",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateHistoryToConsensus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Tokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHistory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateHistoryToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Tokens",
    data: BytesLike
  ): Result;
}

export namespace ApplicationJoinedEvent {
  export type InputTuple = [application: AddressLike];
  export type OutputTuple = [application: string];
  export interface OutputObject {
    application: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewHistoryEvent {
  export type InputTuple = [history: AddressLike];
  export type OutputTuple = [history: string];
  export interface OutputObject {
    history: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Authority extends BaseContract {
  connect(runner?: ContractRunner | null): Authority;
  waitForDeployment(): Promise<this>;

  interface: AuthorityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Get a claim from the current history.         The encoding of `_proofContext` might vary depending on the         implementation of the current history contract.
   * @param _dapp The DApp address
   * @param _proofContext Data for retrieving the desired claim
   */
  getClaim: TypedContractMethod<
    [_dapp: AddressLike, _proofContext: BytesLike],
    [[string, bigint, bigint]],
    "view"
  >;

  /**
   * Get the current history contract.
   */
  getHistory: TypedContractMethod<[], [string], "view">;

  /**
   * Emits an `ApplicationJoined` event with the message sender.
   */
  join: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
   * Transfer ownership over the current history contract to `_consensus`.
   * @param _consensus The new owner of the current history contract
   */
  migrateHistoryToConsensus: TypedContractMethod<
    [_consensus: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the address of the current owner.
   */
  owner: TypedContractMethod<[], [string], "view">;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * Emits a `NewHistory` event.      Can only be called by the `Authority` owner.
   * Make `Authority` point to another history contract.
   * @param _history The new history contract
   */
  setHistory: TypedContractMethod<
    [_history: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Can only be called by the `Authority` owner,      and the `Authority` contract must have ownership over      its current history contract.
   * Submits a claim to the current history contract.         The encoding of `_claimData` might vary depending on the         implementation of the current history contract.
   * @param _claimData Data for submitting a claim
   */
  submitClaim: TypedContractMethod<
    [_claimData: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Can only be called by the `Authority` owner.
   * Transfer some amount of ERC-20 tokens to a recipient.
   * @param _amount The amount of tokens to be withdrawn
   * @param _recipient The recipient address
   * @param _token The token contract
   */
  withdrawERC20Tokens: TypedContractMethod<
    [_token: AddressLike, _recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [_dapp: AddressLike, _proofContext: BytesLike],
    [[string, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHistory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "migrateHistoryToConsensus"
  ): TypedContractMethod<[_consensus: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHistory"
  ): TypedContractMethod<[_history: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<[_claimData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawERC20Tokens"
  ): TypedContractMethod<
    [_token: AddressLike, _recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApplicationJoined"
  ): TypedContractEvent<
    ApplicationJoinedEvent.InputTuple,
    ApplicationJoinedEvent.OutputTuple,
    ApplicationJoinedEvent.OutputObject
  >;
  getEvent(
    key: "NewHistory"
  ): TypedContractEvent<
    NewHistoryEvent.InputTuple,
    NewHistoryEvent.OutputTuple,
    NewHistoryEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ApplicationJoined(address)": TypedContractEvent<
      ApplicationJoinedEvent.InputTuple,
      ApplicationJoinedEvent.OutputTuple,
      ApplicationJoinedEvent.OutputObject
    >;
    ApplicationJoined: TypedContractEvent<
      ApplicationJoinedEvent.InputTuple,
      ApplicationJoinedEvent.OutputTuple,
      ApplicationJoinedEvent.OutputObject
    >;

    "NewHistory(address)": TypedContractEvent<
      NewHistoryEvent.InputTuple,
      NewHistoryEvent.OutputTuple,
      NewHistoryEvent.OutputObject
    >;
    NewHistory: TypedContractEvent<
      NewHistoryEvent.InputTuple,
      NewHistoryEvent.OutputTuple,
      NewHistoryEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
