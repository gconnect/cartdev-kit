/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ERC20PortalInterface extends Interface {
  getFunction(
    nameOrSignature: "depositERC20Tokens" | "getInputBox"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositERC20Tokens",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInputBox",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "depositERC20Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputBox",
    data: BytesLike
  ): Result;
}

export interface ERC20Portal extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20Portal;
  waitForDeployment(): Promise<this>;

  interface: ERC20PortalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Transfer ERC-20 tokens to a DApp and add an input to the DApp's input box to signal such operation. The caller must allow the portal to withdraw at least `_amount` tokens from their account beforehand, by calling the `approve` function in the token contract.
   * @param _amount The amount of tokens to be transferred
   * @param _dapp The address of the DApp
   * @param _execLayerData Additional data to be interpreted by the execution layer
   * @param _token The ERC-20 token contract
   */
  depositERC20Tokens: TypedContractMethod<
    [
      _token: AddressLike,
      _dapp: AddressLike,
      _amount: BigNumberish,
      _execLayerData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  /**
   * Get the input box used by this input relay.
   */
  getInputBox: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositERC20Tokens"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _dapp: AddressLike,
      _amount: BigNumberish,
      _execLayerData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getInputBox"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
